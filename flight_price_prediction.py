# -*- coding: utf-8 -*-
"""Flight Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qVxXRxpdEvxSSP1b1Jdmc0Rp2P_pGKdK

## Flight Price Prediction EDA + Feature Engineering
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

train_df = pd.read_excel('Data_Train.xlsx')
test_df = pd.read_excel('Test_set.xlsx')

train_df.head(10)

test_df.head()

final_df = train_df.append(test_df)
final_df

final_df.info()

##Feature Engineering
final_df['Day'] = final_df['Date_of_Journey'].str.split('/').str[0].astype(int)
final_df['Month'] = final_df['Date_of_Journey'].str.split('/').str[1].astype(int)
final_df['Year'] = final_df['Date_of_Journey'].str.split('/').str[2].astype(int)
final_df.drop('Date_of_Journey', axis=1, inplace=True)
final_df.head()

final_df.info()

final_df['Arrival_Time'] = final_df['Arrival_Time'].str.split(' ').str[0]

final_df.isnull().sum()

final_df['Arrival_Hour'] = final_df['Arrival_Time'].str.split(':').str[0].astype(int)
final_df['Arrival_Minute'] = final_df['Arrival_Time'].str.split(':').str[1].astype(int)
final_df.drop('Arrival_Time', axis=1, inplace=True)

final_df.head()

final_df.info()

final_df['Dep_Hour'] = final_df['Dep_Time'].str.split(':').str[0].astype(int)
final_df['Dep_Minute'] = final_df['Dep_Time'].str.split(':').str[1].astype(int)
final_df.drop('Dep_Time', axis=1, inplace=True)
final_df.head()

final_df['Total_Stops'].unique()

final_df['Total_Stops'] = final_df['Total_Stops'].map({'non-stop':0, '2 stops':2, '1 stop':1, '3 stops':3, '4 stops':4, 'nan':1})
final_df.drop('Route', axis=1, inplace=True)
final_df.head()

final_df['Additional_Info'].unique()

final_df.info()

final_df['Duration'].str.split(" ").str[0].str.split("h").str[0]

final_df[final_df['Duration'] == "5m"]

final_df.drop(6474, axis=0, inplace=True)
final_df.drop(2660, axis=0, inplace=True)

final_df['Duration'].str.split(" ").str[0].str.split("h").str[0].astype(int)

final_df['Duration_Hour'] = final_df['Duration'].str.split(" ").str[0].str.split("h").str[0].astype(int)

final_df['Duration_min'] = final_df['Duration'].str.split(" ").str[1].str.split('m').str[0].astype(float)

final_df.drop(["Duration"], axis=1, inplace=True)

final_df['Duration_min'].fillna(0, inplace=True)

final_df['Full_Duration_Minutes'] = final_df['Duration_Hour'] * 60 + final_df['Duration_min']
final_df.drop(['Duration_Hour', 'Duration_min'], axis=1 , inplace=True)

final_df

final_df['Airline'].unique()

df_train = final_df[~final_df.Price.isnull()]
df_test = final_df[final_df.Price.isnull()]

X = df_train.drop('Price', axis=1).values
y = df_train['Price'].values

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0, 1, 2, 4])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from xgboost import XGBRegressor
model = XGBRegressor()
model.fit(X_train, y_train)

## Accuracy on Train data
y_pred = model.predict(X_train)
from sklearn.metrics import r2_score
print(r2_score(y_pred, y_train))

## Accuracy on Test data
y_pred = model.predict(X_test)
print(r2_score(y_pred, y_test))